// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RRScout;

#nullable disable

namespace RRScout.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240116211638_IdentityTables")]
    partial class IdentityTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RRScout.Entities.Event", b =>
                {
                    b.Property<string>("eventCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("eventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("eventCode");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("RRScout.Entities.MatchData_2023", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("autoChargeStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("autoHigh")
                        .HasColumnType("int");

                    b.Property<int>("autoLow")
                        .HasColumnType("int");

                    b.Property<int>("autoMid")
                        .HasColumnType("int");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("endChargeStation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchNumber")
                        .HasColumnType("int");

                    b.Property<string>("startingPosition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("teamNumber")
                        .HasColumnType("int");

                    b.Property<int>("teleHigh")
                        .HasColumnType("int");

                    b.Property<int>("teleLow")
                        .HasColumnType("int");

                    b.Property<int>("teleMid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MatchData_2023");
                });

            modelBuilder.Entity("RRScout.Entities.MatchData_2024", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("autoAmp")
                        .HasColumnType("int");

                    b.Property<string>("autoMobility")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("autoSpeaker")
                        .HasColumnType("int");

                    b.Property<string>("climb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchNumber")
                        .HasColumnType("int");

                    b.Property<string>("playedDefense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("teamNumber")
                        .HasColumnType("int");

                    b.Property<int>("teleAmp")
                        .HasColumnType("int");

                    b.Property<int>("teleSpeaker")
                        .HasColumnType("int");

                    b.Property<int>("teleTrap")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MatchData_2024");
                });

            modelBuilder.Entity("RRScout.Entities.MatchSchedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("blue1")
                        .HasColumnType("int");

                    b.Property<int>("blue2")
                        .HasColumnType("int");

                    b.Property<int>("blue3")
                        .HasColumnType("int");

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("matchNumber")
                        .HasColumnType("int");

                    b.Property<int>("red1")
                        .HasColumnType("int");

                    b.Property<int>("red2")
                        .HasColumnType("int");

                    b.Property<int>("red3")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("MatchSchedule");
                });

            modelBuilder.Entity("RRScout.Entities.PicklistOrder", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("order")
                        .HasColumnType("int");

                    b.Property<int>("teamNumber")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("PicklistOrder");
                });

            modelBuilder.Entity("RRScout.Entities.TeamAverages_2023", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("autoBumpAttempts")
                        .HasColumnType("int");

                    b.Property<decimal?>("autoBumpAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("autoChargeStation")
                        .HasColumnType("float");

                    b.Property<int>("autoFlatAttempts")
                        .HasColumnType("int");

                    b.Property<decimal?>("autoFlatAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("autoMiddleAttempts")
                        .HasColumnType("int");

                    b.Property<decimal?>("autoMiddleAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("autoMiddleEngage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("endChargeStation")
                        .HasColumnType("float");

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numMatches")
                        .HasColumnType("int");

                    b.Property<int>("teamNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("teleHighAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("teleLowAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("teleMidAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("totalTeleAvg")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("TeamAverages_2023");
                });

            modelBuilder.Entity("RRScout.Entities.TeamAverages_2024", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<decimal?>("autoAmpAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("autoMobilityPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("autoSpeakerAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("autoTotalAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("climbAttempts")
                        .HasColumnType("int");

                    b.Property<decimal>("climbPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("climbSuccessRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("eventCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numMatches")
                        .HasColumnType("int");

                    b.Property<int>("teamNumber")
                        .HasColumnType("int");

                    b.Property<decimal?>("teleAmpAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("teleSpeakerAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("teleTotalAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("teleTrapAvg")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("totalAvg")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("id");

                    b.ToTable("TeamAverages_2024");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
